desc 'Execute js tests'
lane :tests do
  sh 'yarn lint'
  sh 'yarn tsc'
  sh 'yarn test'
  sh 'rm ../build/package.json'  # Remove generated package.json to avoid build conflict with original one.
end

before_all do
  skip_docs
  Dir.chdir(ENV['TRAVIS_BUILD_DIR'] || '.') do
    sh 'yarn install'
  end
end

######################
###  IOS PLATFORM  ###
######################
platform :ios do
  before_all do
    setup_travis
  end

  before_each do
    sh 'yarn install-ios'
  end

  desc 'Build iOS Dev app'
  lane :build_dev do
    match(
      type: 'development',
      readonly: true,
      clone_branch_directly: true,
    )

    ENV["ENVFILE"] = ".env.dev"
    build_ios_app(
      export_method: 'development',
      workspace: 'ios/MindBlown.xcworkspace',
      scheme: 'MindBlown',
      configuration: 'Debug',
      skip_package_ipa: true,
      skip_archive: true,
      destination: 'platform=iOS Simulator,name=iPhone 8,OS=12.1'
    )
  end

  desc 'Build iOS QA'
  lane :build_qa do
    match(
      type: 'appstore',
      readonly: true,
      clone_branch_directly: true,
    )

    ENV["ENVFILE"] = ".env.adhoc"
    build_ios_app(
      export_method: 'app-store',
      workspace: 'ios/MindBlown.xcworkspace',
      scheme: 'MindBlown',
      configuration: 'AdHoc',
      output_directory: 'build/',
    )
  end


  desc 'Build iOS Distribution'
  lane :build_dist do
    match(
      type: 'appstore',
      readonly: true,
      clone_branch_directly: true,
    )

    ENV["ENVFILE"] = ".env.prod"
    build_ios_app(
      export_method: 'app-store',
      workspace: 'ios/MindBlown.xcworkspace',
      scheme: 'MindBlown',
      configuration: 'Release',
      output_directory: 'build/',
    )
  end

  desc 'Release iOS QA to TestFlight'
  lane :release_qa do
    build_qa

    upload_to_testflight(
      ipa: 'build/MindBlown.ipa',
      skip_waiting_for_build_processing: true,
    )
  end

  desc 'Release iOS Dist to TestFlight'
  lane :release_dist do
    build_dist

    deliver(ipa: 'build/MindBlown.ipa')
  end
end

##########################
###  ANDROID PLATFORM  ###
##########################
platform :android do
  desc 'Build Android Dev app'
  lane :build_dev do
    ENV["ENVFILE"] = ".env.dev"

    gradle(task: 'clean', project_dir: 'android/')
    gradle(task: 'assemble', build_type: 'Debug', project_dir: 'android/')

    cp_to_deploy()
  end

  desc 'Build Android QA app'
  lane :build_qa do
    ENV["ENVFILE"] = ".env.adhoc"

    gradle(task: 'clean', project_dir: 'android/')
    gradle(task: 'assemble', build_type: 'Release', project_dir: 'android/')

    cp_to_deploy()
  end

  desc 'Build Android Release app'
  lane :build_dist do
    ENV["ENVFILE"] = ".env.prod"

    gradle(task: 'clean', project_dir: 'android/')
    gradle(task: 'assemble', build_type: 'Release', project_dir: 'android/')

    cp_to_deploy()
  end

  desc 'Release Android QA app'
  lane :release_qa do
    build_qa

    upload_to_play_store(
      package_name: 'com.shufflow.MindBlown',
      track: 'alpha',
      json_key: 'google_api_key.json',
      apk: lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH],
    )
  end

  desc 'Release Android Dist app'
  lane :release_dist do
    build_dist

    upload_to_play_store(
      package_name: 'com.shufflow.MindBlown',
      track: 'alpha',
      json_key: 'google_api_key.json',
      apk: lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH],
    )
  end
end

#########################
###  PRIVATE METHODS  ###
#########################
def cp_to_deploy()
  unless Helper.is_ci?
    apk_location = "#{lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH]}"
    out_dir = ENV['BITRISE_DEPLOY_DIR'] || '../build/' # TODO: fix path

    UI.message "Moving bundle to \"#{out_dir}\""
    sh "cp #{apk_location} #{out_dir}"
  end
end
